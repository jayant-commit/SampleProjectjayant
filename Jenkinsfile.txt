#!groovy

import groovy.json.JsonSlurperClassic

node {

    def SF_CONSUMER_KEY = env.SF_CONSUMER_KEY
    def SF_USERNAME = env.SF_USERNAME
    def SERVER_KEY_CREDENTIALS_ID = env.SERVER_KEY_CREDENTIALS_ID
    def TEST_LEVEL = 'RunLocalTests'
    def PACKAGE_NAME = '0Ho1U000000CaUzSAK'
    def PACKAGE_VERSION
    def SF_INSTANCE_URL = env.SF_INSTANCE_URL ?: "https://login.salesforce.com"

    def toolbelt = tool 'toolbelt'  // path to sf CLI executable

    // -------------------------------------------------------------------------
    // Checkout source code from SCM
    // -------------------------------------------------------------------------
    stage('Checkout Source') {
        checkout scm
    }

    withEnv(["HOME=${env.WORKSPACE}"]) {
        withCredentials([file(credentialsId: SERVER_KEY_CREDENTIALS_ID, variable: 'SERVER_KEY_FILE')]) {

            // -------------------------------------------------------------------------
            // Authorize Dev Hub Org with JWT key and set alias 'my-hub-org'
            // -------------------------------------------------------------------------
            stage('Authorize DevHub') {
                def rc = command("${toolbelt} org login jwt --instance-url ${SF_INSTANCE_URL} --client-id ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --jwt-key-file ${SERVER_KEY_FILE} --set-default-dev-hub --alias my-hub-org")
                if (rc != 0) {
                    error 'Salesforce dev hub org authorization failed.'
                }
            }

            // -------------------------------------------------------------------------
            // List all authorized orgs (for debug)
            // -------------------------------------------------------------------------
            stage('Debug: List Authorized Orgs') {
                def rc = command("${toolbelt} org list --all")
                if (rc != 0) {
                    error 'Failed to list authorized orgs.'
                }
            }

            // -------------------------------------------------------------------------
            // Create Scratch Org for testing
            // -------------------------------------------------------------------------
            stage('Create Test Scratch Org') {
                def rc = command("${toolbelt} org create scratch --target-dev-hub my-hub-org --set-default --definition-file config/project-scratch-def.json --alias ciorg --wait 10 --duration-days 1")
                if (rc != 0) {
                    error 'Salesforce test scratch org creation failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Display Scratch Org info
            // -------------------------------------------------------------------------
            stage('Display Test Scratch Org') {
                def rc = command("${toolbelt} org display --target-org ciorg")
                if (rc != 0) {
                    error 'Salesforce test scratch org display failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Push source to Scratch Org
            // -------------------------------------------------------------------------
            stage('Push To Test Scratch Org') {
                def rc = command("${toolbelt} project deploy start --target-org ciorg")
                if (rc != 0) {
                    error 'Salesforce push to test scratch org failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Run Apex Tests in Scratch Org
            // -------------------------------------------------------------------------
            stage('Run Tests In Test Scratch Org') {
                def rc = command("${toolbelt} apex run test --target-org ciorg --wait 10 --result-format tap --code-coverage --test-level ${TEST_LEVEL}")
                if (rc != 0) {
                    error 'Salesforce unit test run in test scratch org failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Delete Test Scratch Org
            // -------------------------------------------------------------------------
            stage('Delete Test Scratch Org') {
                def rc = command("${toolbelt} org delete scratch --target-org ciorg --no-prompt")
                if (rc != 0) {
                    error 'Salesforce test scratch org deletion failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Create Package Version
            // -------------------------------------------------------------------------
            stage('Create Package Version') {
                def output
                if (isUnix()) {
                    output = sh(returnStdout: true, script: "${toolbelt} package version create --package ${PACKAGE_NAME} --installation-key-bypass --wait 10 --json --target-dev-hub my-hub-org").trim()
                } else {
                    output = bat(returnStdout: true, script: "${toolbelt} package version create --package ${PACKAGE_NAME} --installation-key-bypass --wait 10 --json --target-dev-hub my-hub-org").trim()
                    output = output.readLines().drop(1).join(" ")
                }

                // Wait 5 minutes for package replication
                sleep 300

                def jsonSlurper = new JsonSlurperClassic()
                def response
                try {
                    response = jsonSlurper.parseText(output)
                    PACKAGE_VERSION = response.result.SubscriberPackageVersionId
                } catch (Exception e) {
                    error "Failed to parse package version creation output: ${e.message}"
                }

                echo "Created package version: ${PACKAGE_VERSION}"
            }

            // -------------------------------------------------------------------------
            // Create Scratch Org for Package Installation
            // -------------------------------------------------------------------------
            stage('Create Package Install Scratch Org') {
                def rc = command("${toolbelt} org create scratch --target-dev-hub my-hub-org --set-default --definition-file config/project-scratch-def.json --alias installorg --wait 10 --duration-days 1")
                if (rc != 0) {
                    error 'Salesforce package install scratch org creation failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Display Package Install Scratch Org info
            // -------------------------------------------------------------------------
            stage('Display Install Scratch Org') {
                def rc = command("${toolbelt} org display --target-org installorg")
                if (rc != 0) {
                    error 'Salesforce install scratch org display failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Install Package in Scratch Org
            // -------------------------------------------------------------------------
            stage('Install Package In Scratch Org') {
                def rc = command("${toolbelt} package install --package ${PACKAGE_VERSION} --target-org installorg --wait 10")
                if (rc != 0) {
                    error 'Salesforce package install failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Run Apex Tests in Package Install Scratch Org
            // -------------------------------------------------------------------------
            stage('Run Tests In Package Install Scratch Org') {
                def rc = command("${toolbelt} apex run test --target-org installorg --result-format tap --code-coverage --test-level ${TEST_LEVEL} --wait 10")
                if (rc != 0) {
                    error 'Salesforce unit test run in package install scratch org failed.'
                }
            }

            // -------------------------------------------------------------------------
            // Delete Package Install Scratch Org
            // -------------------------------------------------------------------------
            stage('Delete Package Install Scratch Org') {
                def rc = command("${toolbelt} org delete scratch --target-org installorg --no-prompt")
                if (rc != 0) {
                    error 'Salesforce package install scratch org deletion failed.'
                }
            }
        }
    }
}

// Helper method to execute shell or batch command and return status code
def command(String script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script)
    } else {
        return bat(returnStatus: true, script: script)
    }
}
